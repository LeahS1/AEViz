# -*- coding: utf-8 -*-
"""AE Viz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVyTSUoYeHloq-NkSE0x2PQDWhtbWk7j

# Adverse Events Visualization

"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import nltk
from nltk.collocations import BigramAssocMeasures, BigramCollocationFinder
from nltk.collocations import TrigramAssocMeasures, TrigramCollocationFinder
nltk.download('punkt')
from wordcloud import WordCloud

# File path for Excel file of clean subjects
PATH = "/content/drive/MyDrive/Colab Notebooks/AE_Visualization_Data.xlsx"

AE_df= pd.read_excel(PATH)

def count_occurrences_series(series):
    count = series.value_counts().sort_values(ascending=False)
    return count

def bar_graph(series, xlabel, ylabel):
    series.plot(kind='bar')
    plt.title((ylabel + " by " + xlabel))
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    return plt.show()

def calculate_duration(row):
    duration = row['Adverse Event End Date \n [AEENDAT]'] - row['Adverse Event Start Date \n [AESTDAT]']
    return duration.days

print(AE_df.columns)
print(AE_df.head())

"""### How many subjects experienced AEs?

There were 22 unique subjects who experienced adverse events. These subjects experienced a total of 55 adverse events to date.
"""

# determine how many subjects had AEs
unique_ids = AE_df['Subject Number \n [SUBJID]'].nunique()
print ("There are", unique_ids, "subjects who experienced Adverse Events")

# get the number of rows in the dataframe
num_rows = AE_df.shape[0]

print("Number of adverse events logged: ", num_rows)

"""### How many events did each subject experience?

About 59% of subjects experienced 1 or 2 adverse events. Out of the 22 subjects that experienced adverse events, 8 subjects (36.36%) experienced one adverse event and 5 subjects (22.73%) experienced two adverse events. One subject experienced 6 (max) adverse events.
"""

# Count entries for each ID and sort in descending order
counts = count_occurrences_series(AE_df['Subject Number \n [SUBJID]'])

# Top 10 IDs with the most occurrences
print(counts.head(10))

# determine frequency of each event occurence
value_counts = count_occurrences_series(counts)
print(value_counts)

bar_graph(value_counts, 'Count of Adverse Events Experienced','# of subjects')

#calculate percentage of subjects who experienced each count
percentages = round(value_counts / counts.count(),4)

# print the percentages
format_func = lambda x: "{:.2%} of subjects experienced {} adverse event(s).".format(x[1], x[0])

# apply formatting to the series
formatted_series = percentages.reset_index().apply(format_func, axis=1).rename("formatted")
formatted_series.index = percentages.index

# print the formatted series
print(formatted_series)

bar_graph(counts, 'Subject ID', '# of Adverse Events')

"""## How long did these adverse events last?

We see that many adverse events resolved the same day. Most adverse events (52.7%) resolved within 3 days. The average duration was 6.3 days. There are 9 ongoing events.
"""

# convert start_date and end_date columns to datetime objects
AE_df['Adverse Event Start Date \n [AESTDAT]'] = pd.to_datetime(AE_df['Adverse Event Start Date \n [AESTDAT]'])
AE_df['Adverse Event End Date \n [AEENDAT]'] = pd.to_datetime(AE_df['Adverse Event End Date \n [AEENDAT]'])

# add a new column called 'Duration' to the dataframe and calculate its value 
AE_df['Duration'] = AE_df.apply(calculate_duration, axis=1)

print(AE_df.loc[:19, ['Subject Number \n [SUBJID]', 'Duration']])

# calculate the # of ongoing adverse events
num_nan = AE_df['Duration'].isna().sum()
print(f"There are {num_nan} ongoing adverse events reported")

average_duration = AE_df['Duration'].mean()
rounded_num = round(average_duration, 1)
print(f"The average duration is: {rounded_num} days.")

# graph the durations of adverse events
duration_counts = count_occurrences_series(AE_df['Duration']).sort_index()

# calculate the percentage of the total events
sum_counts = duration_counts[0] + duration_counts[1] + duration_counts[2] + duration_counts[3]
percentage = (sum_counts / 55) * 100

print("{:.2f}% of AEs are resolved within 3 days".format(percentage))

bar_graph(duration_counts,'Duration in days','# of Adverse Events')

start_dates = AE_df['Adverse Event Start Date \n [AESTDAT]']
end_dates = AE_df['Adverse Event End Date \n [AEENDAT]']
subject_ids = AE_df['Subject Number \n [SUBJID]']

# Create a scatter plot with start and end points
plt.scatter(start_dates, subject_ids, label='Start Date')
plt.scatter(end_dates, subject_ids, label='End Date')

# Plot the duration line between start and end dates
for start, end, subject_id in zip(start_dates, end_dates, subject_ids):
  if pd.notna(start) and pd.notna(end):
    plt.plot([start, end], [subject_id, subject_id], '--', label='Duration')

# Set the x-axis to display dates
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=30))

# Add labels, title, and legend
plt.xlabel('Date')
plt.ylabel('Subject ID')
plt.title('Start and End Dates for Each Subject ID')
plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1))
plt.subplots_adjust(left=0.2, right=3, top=0.95, bottom=0.05)
plt.show()

"""### What adverse events are being reported?

We see that most reported adverse event terms are related to the right or left knee with edema occurrence. Taking a closer look at the most common bigrams and trigrams, we see that many of the adverse events are related to elevated blood pressure and edema around the right or left knee. There also seems to be many occurrences of nausea and urinary tract infections. The reports are coded into higher level terms, with Nausea and vomiting symptoms referenced the most (8 occurrences), followed by Coronavirus infections (5), Joint related signs and symptoms (5), and Injection site reactions (5). Given that this trial was carried out during the pandemic, it's possible that the reports of coronavirus infection are not related to the study treatment, but the other three high level terms may be.
"""

text_data = AE_df['Reported Term for Adverse Event \n [AETERM]'].str.cat(sep=' ')
wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(text_data)

# Plot the WordCloud image
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)

# Display the plot
plt.show()

# Load the text data from a file or dataframe column
text_data = " ".join(AE_df['Reported Term for Adverse Event \n [AETERM]'].values.tolist())

# Tokenize the text data
tokens = nltk.word_tokenize(text_data)

# Create a bigram finder and extract the top 10 bigrams
bigram_measures = BigramAssocMeasures()
bigram_finder = BigramCollocationFinder.from_words(tokens)
bigram_finder.apply_freq_filter(2)
top_bigrams = bigram_finder.nbest(bigram_measures.raw_freq, 10)

# Create a trigram finder and extract the top 10 trigrams
trigram_measures = TrigramAssocMeasures()
trigram_finder = TrigramCollocationFinder.from_words(tokens)
trigram_finder.apply_freq_filter(2)
top_trigrams = trigram_finder.nbest(trigram_measures.raw_freq, 10)

# Print the top bigrams and trigrams
print('Top 10 bigrams:', top_bigrams)
print('Top 10 trigrams:', top_trigrams)

# graph the counts of High level terms
HLT_counts = count_occurrences_series(AE_df['High Level Term \n [AEHLT]'])
HLT_counts.sort_index(inplace=True)  
HLT_counts.sort_values(ascending=True, inplace=True)

print(HLT_counts.sort_values(ascending=False).head(5))

plt.barh(HLT_counts.index, HLT_counts)

plt.title('High level Term counts')
plt.ylabel('High Level Term')
plt.yticks(rotation=0)
plt.xlabel('Count')
plt.subplots_adjust(left=0.1, right=1, top=2, bottom=0.15)
plt.show()

"""### Out of curiosity

Taking a closer look at the subject with 6 adverse events reported, we see that this subject has a concomitant health condition (hypertension) that could potentially lead to one of the other reported adverse events (headache). Two of their reported adverse events were related to the left knee. If we look at all reported occurrences of edema, 4 reports resolved within a day, 2 were ongoing, and the remaining 3 resolved in 6 days. Looking at the Lowest Level Term, we see that 5 of the reports are related to the injection site, so the edema might be a short term side effect of the injection.
"""

sub016_data = AE_df.loc[subject_ids == '016-001','Reported Term for Adverse Event \n [AETERM]' ]
print(sub016_data.head())

# Filter rows that contain "edema"
AE_df['Reported Term for Adverse Event \n [AETERM]'] = AE_df['Reported Term for Adverse Event \n [AETERM]'].str.lower()
edema_df = AE_df[AE_df['Reported Term for Adverse Event \n [AETERM]'].str.contains('edema')]

# Extract duration information from the filtered dataframe
duration_df = edema_df[['Duration']]
print(duration_df)
print(pd.concat([edema_df['Reported Term for Adverse Event \n [AETERM]'], edema_df['Lowest Level Term \n [AELLT]']], axis=1))

"""# Conclusion

This analysis of adverse event data from this clinical trial suggests that the study treatment, relating to an injection in or around the knees, may be leading to edema, nausea, and elevated blood pressure in subjects. Twenty two subjects experienced 55 adverse events, 9 of which were ongoing (possibly long  term health conditions). While most subjects experienced 2 adverse events over the course of the study, some experienced up to 6. Most of the adverse events resolved within 3 days, with many resolving the same day.

Further analysis of the dataset should not only consider the severity of adverse events but also explore potential relationships and associations between events. By reviewing subjects who experienced multiple adverse events, researchers can gain a better understanding of potential concomitant events that may be contributing to the observed effects. Additionally, external data such as injection timepoints and locations can provide valuable insights into the onset and distribution of adverse events. By taking a comprehensive approach to analyzing the data, researchers can uncover important patterns and trends that may have significant implications for future studies and clinical practice.
"""
